# Generated by: Neurodocker version 0.7.0+0.gdc97516.dirty
# Latest release: Neurodocker version 0.7.0
# Timestamp: 2021/03/07 19:18:09 UTC
# 
# Thank you for using Neurodocker. If you discover any issues
# or ways to improve this software, please submit an issue or
# pull request on our GitHub repository:
# 
#     https://github.com/ReproNim/neurodocker

FROM neurodebian:stretch-non-free

USER root

ARG DEBIAN_FRONTEND="noninteractive"

ENV LANG="en_US.UTF-8" \
    LC_ALL="en_US.UTF-8" \
    ND_ENTRYPOINT="/neurodocker/startup.sh"
RUN export ND_ENTRYPOINT="/neurodocker/startup.sh" \
    && apt-get update -qq \
    && apt-get install -y -q --no-install-recommends \
           apt-utils \
           bzip2 \
           ca-certificates \
           curl \
           locales \
           unzip \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/* \
    && sed -i -e 's/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/' /etc/locale.gen \
    && dpkg-reconfigure --frontend=noninteractive locales \
    && update-locale LANG="en_US.UTF-8" \
    && chmod 777 /opt && chmod a+s /opt \
    && mkdir -p /neurodocker \
    && if [ ! -f "$ND_ENTRYPOINT" ]; then \
         echo '#!/usr/bin/env bash' >> "$ND_ENTRYPOINT" \
    &&   echo 'set -e' >> "$ND_ENTRYPOINT" \
    &&   echo 'export USER="${USER:=`whoami`}"' >> "$ND_ENTRYPOINT" \
    &&   echo 'if [ -n "$1" ]; then "$@"; else /usr/bin/env bash; fi' >> "$ND_ENTRYPOINT"; \
    fi \
    && chmod -R 777 /neurodocker && chmod a+s /neurodocker

ENTRYPOINT ["/neurodocker/startup.sh"]

RUN apt-get update -qq \
    && apt-get install -y -q --no-install-recommends \
           ants \
           fsl \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*



RUN apt-get update && \
    apt-get install -y \
        cmake \
        gcc \
        g++ \
        git \
    && \
    cd /opt && \
    git clone https://git.code.sf.net/p/niftyreg/git niftyreg-git && \
    cd /opt/niftyreg-git && \
    mkdir build && \
    cd build && \
    cmake -D CMAKE_BUILD_TYPE=Release /opt/niftyreg-git && \
    make && \
    make install && \
    rm -r /opt/niftyreg-git && \
    apt-get remove -y \
        cmake \
        git \
    && \
    apt-get autoremove -y && \
    apt-get clean && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

RUN sed -i '$isource /etc/fsl/fsl.sh' $ND_ENTRYPOINT

ENV FORCE_SPMMCR="1" \
    SPM_HTML_BROWSER="0" \
    LD_LIBRARY_PATH="$LD_LIBRARY_PATH:/usr/lib/x86_64-linux-gnu:/opt/matlabmcr-2010a/v713/runtime/glnxa64:/opt/matlabmcr-2010a/v713/bin/glnxa64:/opt/matlabmcr-2010a/v713/sys/os/glnxa64:/opt/matlabmcr-2010a/v713/extern/bin/glnxa64" \
    MATLABCMD="/opt/matlabmcr-2010a/v713/toolbox/matlab"
RUN export TMPDIR="$(mktemp -d)" \
    && apt-get update -qq \
    && apt-get install -y -q --no-install-recommends \
           bc \
           libncurses5 \
           libxext6 \
           libxmu6 \
           libxpm-dev \
           libxt6 \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/* \
    && echo "Downloading MATLAB Compiler Runtime ..." \
    && curl -sSL --retry 5 -o /tmp/toinstall.deb http://mirrors.kernel.org/debian/pool/main/libx/libxp/libxp6_1.0.2-2_amd64.deb \
    && dpkg -i /tmp/toinstall.deb \
    && rm /tmp/toinstall.deb \
    && apt-get install -f \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/* \
    && curl -fsSL --retry 5 -o "$TMPDIR/MCRInstaller.bin" https://dl.dropbox.com/s/zz6me0c3v4yq5fd/MCR_R2010a_glnxa64_installer.bin \
    && chmod +x "$TMPDIR/MCRInstaller.bin" \
    && "$TMPDIR/MCRInstaller.bin" -silent -P installLocation="/opt/matlabmcr-2010a" \
    && rm -rf "$TMPDIR" \
    && unset TMPDIR \
    && echo "Downloading standalone SPM ..." \
    && curl -fsSL --retry 5 -o /tmp/spm12.zip https://www.fil.ion.ucl.ac.uk/spm/download/restricted/utopia/previous/spm12_r7219_R2010a.zip \
    && unzip -q /tmp/spm12.zip -d /tmp \
    && mkdir -p /opt/spm12-r7219 \
    && mv /tmp/spm12/* /opt/spm12-r7219/ \
    && chmod -R 777 /opt/spm12-r7219 \
    && rm -rf /tmp/spm* \
    && /opt/spm12-r7219/run_spm12.sh /opt/matlabmcr-2010a/v713 quit \
    && sed -i '$iexport SPMMCRCMD=\"/opt/spm12-r7219/run_spm12.sh /opt/matlabmcr-2010a/v713 script\"' $ND_ENTRYPOINT

RUN test "$(getent passwd neuro)" || useradd --no-user-group --create-home --shell /bin/bash neuro

RUN mkdir -p /home/neuro/data/oasis_dataset/sub-OAS30001/ses-test/anat \
    && mkdir -p /home/neuro/data/oasis_dataset/sub-OAS30002/ses-test/anat \
    && mkdir -p /home/neuro/data/oasis_dataset/sub-OAS30003/ses-test/anat \
    && mkdir -p /home/neuro/data/oasis_dataset/sub-OAS30004/ses-test/anat \
    && mkdir -p /home/neuro/data/oasis_dataset/sub-OAS30005/ses-test/anat \
    && mkdir -p /home/neuro/data/oasis_dataset/sub-OAS30001/ses-test/pet \
    && mkdir -p /home/neuro/data/oasis_dataset/sub-OAS30002/ses-test/pet \
    && mkdir -p /home/neuro/data/oasis_dataset/sub-OAS30003/ses-test/pet \
    && mkdir -p /home/neuro/data/oasis_dataset/sub-OAS30004/ses-test/pet \
    && mkdir -p /home/neuro/data/oasis_dataset/sub-OAS30005/ses-test/pet \
    && mkdir -p /home/neuro/output

RUN chmod 777 /home/neuro/output

ADD data/oasis_dataset/sub-OAS30001/ses-test/anat /home/neuro/data/oasis_dataset/sub-OAS30001/ses-test/anat
ADD data/oasis_dataset/sub-OAS30002/ses-test/anat /home/neuro/data/oasis_dataset/sub-OAS30002/ses-test/anat
ADD data/oasis_dataset/sub-OAS30003/ses-test/anat /home/neuro/data/oasis_dataset/sub-OAS30003/ses-test/anat
ADD data/oasis_dataset/sub-OAS30004/ses-test/anat /home/neuro/data/oasis_dataset/sub-OAS30004/ses-test/anat
ADD data/oasis_dataset/sub-OAS30005/ses-test/anat /home/neuro/data/oasis_dataset/sub-OAS30005/ses-test/anat

ADD data/oasis_dataset/sub-OAS30001/ses-test/pet /home/neuro/data/oasis_dataset/sub-OAS30001/ses-test/pet
ADD data/oasis_dataset/sub-OAS30002/ses-test/pet /home/neuro/data/oasis_dataset/sub-OAS30002/ses-test/pet
ADD data/oasis_dataset/sub-OAS30003/ses-test/pet /home/neuro/data/oasis_dataset/sub-OAS30003/ses-test/pet
ADD data/oasis_dataset/sub-OAS30004/ses-test/pet /home/neuro/data/oasis_dataset/sub-OAS30004/ses-test/pet
ADD data/oasis_dataset/sub-OAS30005/ses-test/pet /home/neuro/data/oasis_dataset/sub-OAS30005/ses-test/pet

COPY data/*.nii /home/neuro/data
COPY suvr_analysis_workflow.ipynb /home/neuro

RUN chmod 777 /home/neuro/suvr_analysis_workflow.ipynb

USER neuro

ENV CONDA_DIR="/opt/miniconda-latest" \
    PATH="/opt/miniconda-latest/bin:$PATH"
RUN export PATH="/opt/miniconda-latest/bin:$PATH" \
    && echo "Downloading Miniconda installer ..." \
    && conda_installer="/tmp/miniconda.sh" \
    && curl -fsSL --retry 5 -o "$conda_installer" https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh \
    && bash "$conda_installer" -b -p /opt/miniconda-latest \
    && rm -f "$conda_installer" \
    && conda update -yq -nbase conda \
    && conda config --system --prepend channels conda-forge \
    && conda config --system --set auto_update_conda false \
    && conda config --system --set show_channel_urls true \
    && sync && conda clean -y --all && sync \
    && conda create -y -q --name neuro \
    && conda install -y -q --name neuro \
           "python=3.6" \
           "jupyter" \
           "numpy" \
           "scipy" \
           "matplotlib" \
           "nibabel" \
           "python-graphviz" \
    && sync && conda clean -y --all && sync \
    && bash -c "source activate neuro \
    &&   pip install --no-cache-dir  \
             "nilearn" \
             "https://github.com/nipy/nipype/tarball/master"" \
    && rm -rf ~/.cache/pip/* \
    && sync \
    && sed -i '$isource activate neuro' $ND_ENTRYPOINT

#install graphviz for looking at .dot graphs
RUN apt-get -qq update; \
    apt-get install -qqy \
        graphviz ruby-graphviz; \
    rm -rf /var/lib/apt/lists/*



WORKDIR /home/neuro

RUN echo '{ \
    \n  "pkg_manager": "apt", \
    \n  "instructions": [ \
    \n    [ \
    \n      "base", \
    \n      "neurodebian:stretch-non-free" \
    \n    ], \
    \n    [ \
    \n      "install", \
    \n      [ \
    \n        "ants", \
    \n        "fsl" \
    \n      ] \
    \n    ], \
    \n    [ \
    \n      "add_to_entrypoint", \
    \n      "source /etc/fsl/fsl.sh" \
    \n    ], \
    \n    [ \
    \n      "spm12", \
    \n      { \
    \n        "version": "r7219" \
    \n      } \
    \n    ], \
    \n    [ \
    \n      "user", \
    \n      "neuro" \
    \n    ], \
    \n    [ \
    \n      "miniconda", \
    \n      { \
    \n        "miniconda_version": "4.3.31", \
    \n        "conda_install": [ \
    \n          "python=3.6", \
    \n          "jupyter", \
    \n          "numpy", \
    \n          "scipy", \
    \n          "matplotlib" \
    \n          "nibabel" \
    \n          "python-graphviz" \
    \n        ], \
    \n        "pip_install": [ \
    \n          "nilearn", \
    \n          "https://github.com/nipy/nipype/tarball/master" \
    \n        ], \
    \n        "create_env": "neuro", \
    \n        "activate": true \
    \n      } \
    \n    ], \
    \n    [ \
    \n      "workdir", \
    \n      "/home/neuro" \
    \n    ] \
    \n  ] \
    \n}' > /neurodocker/neurodocker_specs.json

CMD ["jupyter", "notebook", "--port=8888", "--no-browser", "--ip=0.0.0.0", "--allow-root"]
